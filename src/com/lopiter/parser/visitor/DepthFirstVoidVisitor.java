/* Generated by JTB 1.4.7 */
package com.lopiter.parser.visitor;

import com.lopiter.parser.node.*;
import java.util.*;

public class DepthFirstVoidVisitor implements IVoidVisitor {


  public void visit(final NodeChoice n) {
    n.choice.accept(this);
    return;
  }

  public void visit(final NodeList n) {
    for (final Iterator<INode> e = n.elements(); e.hasNext();) {
      e.next().accept(this);
    }
    return;
  }

  public void visit(final NodeListOptional n) {
    if (n.present()) {
      for (final Iterator<INode> e = n.elements(); e.hasNext();) {
        e.next().accept(this);
        }
      return;
    } else
      return;
  }

  public void visit(final NodeOptional n) {
    if (n.present()) {
      n.node.accept(this);
      return;
    } else
      return;
  }

  public void visit(final NodeSequence n) {
    for (final Iterator<INode> e = n.elements(); e.hasNext();) {
      e.next().accept(this);
    }
    return;
  }

  public void visit(final NodeTCF n) {
    @SuppressWarnings("unused")
    final String tkIm = n.tokenImage;
    return;
  }

  public void visit(final NodeToken n) {
    @SuppressWarnings("unused")
    final String tkIm = n.tokenImage;
    return;
  }

  public void visit(final MyParsercompilationunit n) {
    // f0 -> ( function() )+
    n.f0.accept(this);
  }

  public void visit(final MyParserfunction n) {
    // f0 -> <FUNCTION>
    n.f0.accept(this);
    // f1 -> <IDENTIFIER>
    n.f1.accept(this);
    // f2 -> <LEFT_PARENTHESIS>
    n.f2.accept(this);
    // f3 -> [ <IDENTIFIER> ]
    n.f3.accept(this);
    // f4 -> ( #0 <COMMA_CHAR> #1 <IDENTIFIER> )*
    n.f4.accept(this);
    // f5 -> <RIGHT_PARENTHESIS>
    n.f5.accept(this);
    // f6 -> <LEFT_BRACE>
    n.f6.accept(this);
    // f7 -> [ statement() ]
    n.f7.accept(this);
    // f8 -> <RIGHT_BRACE>
    n.f8.accept(this);
  }

  public void visit(final MyParserstatement n) {
    // f0 -> ( %0 printStatement()
    // .. .. | %1 forStatement()
    // .. .. | %2 ifStatemet()
    // .. .. | %3 readStatement()
    // .. .. | %4 callStatement()
    // .. .. | %5 setValueStatement() )+
    n.f0.accept(this);
  }

  public void visit(final MyParserforStatement n) {
    // f0 -> <FOR>
    n.f0.accept(this);
    // f1 -> <INTEGER>
    n.f1.accept(this);
    // f2 -> <TO>
    n.f2.accept(this);
    // f3 -> <INTEGER>
    n.f3.accept(this);
    // f4 -> <LEFT_BRACE>
    n.f4.accept(this);
    // f5 -> statement()
    n.f5.accept(this);
    // f6 -> <RIGHT_BRACE>
    n.f6.accept(this);
  }

  public void visit(final MyParserprintStatement n) {
    // f0 -> <PRINT>
    n.f0.accept(this);
    // f1 -> ( %0 <IDENTIFIER>
    // .. .. | %1 <QUOTED_IDENTIFIER> )
    n.f1.accept(this);
  }

  public void visit(final MyParserifStatemet n) {
    // f0 -> <IF>
    n.f0.accept(this);
    // f1 -> ( %0 <IDENTIFIER>
    // .. .. | %1 <NULL> )
    n.f1.accept(this);
    // f2 -> ( %0 <IF_EQUAL>
    // .. .. | %1 <IF_NOT_EQUAL> )
    n.f2.accept(this);
    // f3 -> ( %0 <IDENTIFIER>
    // .. .. | %1 <NULL> )
    n.f3.accept(this);
    // f4 -> <LEFT_BRACE>
    n.f4.accept(this);
    // f5 -> statement()
    n.f5.accept(this);
    // f6 -> <RIGHT_BRACE>
    n.f6.accept(this);
  }

  public void visit(final MyParserreadStatement n) {
    // f0 -> <READ>
    n.f0.accept(this);
    // f1 -> <QUOTED_IDENTIFIER>
    n.f1.accept(this);
    // f2 -> <TO>
    n.f2.accept(this);
    // f3 -> <IDENTIFIER>
    n.f3.accept(this);
  }

  public void visit(final MyParsercallStatement n) {
    // f0 -> <IDENTIFIER>
    n.f0.accept(this);
    // f1 -> <LEFT_PARENTHESIS>
    n.f1.accept(this);
    // f2 -> [ <IDENTIFIER> ]
    n.f2.accept(this);
    // f3 -> ( #0 <COMMA_CHAR> #1 <IDENTIFIER> )*
    n.f3.accept(this);
    // f4 -> <RIGHT_PARENTHESIS>
    n.f4.accept(this);
  }

  public void visit(final MyParsersetValueStatement n) {
    // f0 -> <VAR>
    n.f0.accept(this);
    // f1 -> <IDENTIFIER>
    n.f1.accept(this);
    // f2 -> [ #0 <EQUAL>
    // .. .. . #1 ( %0 <IDENTIFIER>
    // .. .. . .. | %1 <QUOTED_IDENTIFIER>
    // .. .. . .. | %2 <INTEGER> ) ]
    n.f2.accept(this);
  }

}

/* MyParser.java */
/* Generated By:JavaCC: Do not edit this line. MyParser.java */
package com.lopiter.parser;

import com.lopiter.parser.node.*;


public class MyParser implements MyParserConstants {

  static final public MyParsercompilationunit MyParsercompilationunit() throws ParseException {// --- JTB generated node declarations ---
  NodeList n0 = new NodeList();
  MyParserfunction n1 = null;
    label_1:
    while (true) {
      n1 = MyParserfunction();
n0.addNode(n1);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FUNCTION:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
    }
n0.nodes.trimToSize();
{if ("" != null) return new MyParsercompilationunit(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public MyParserfunction MyParserfunction() throws ParseException {// --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeOptional n6 = new NodeOptional();
  NodeToken n7 = null;
  Token n8 = null;
  NodeListOptional n9 = new NodeListOptional();
  NodeSequence n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
  NodeToken n15 = null;
  Token n16 = null;
  NodeToken n17 = null;
  Token n18 = null;
  NodeOptional n19 = new NodeOptional();
  MyParserstatement n20 = null;
  NodeToken n21 = null;
  Token n22 = null;
    n1 = jj_consume_token(FUNCTION);
n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(IDENTIFIER);
n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(LEFT_PARENTHESIS);
n4 = JTBToolkit.makeNodeToken(n5);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFIER:{
      n8 = jj_consume_token(IDENTIFIER);
n7 = JTBToolkit.makeNodeToken(n8);
n6.addNode(n7);
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA_CHAR:{
        ;
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
n10 = new NodeSequence(2);
      n12 = jj_consume_token(COMMA_CHAR);
n11 = JTBToolkit.makeNodeToken(n12);
n10.addNode(n11);
      n14 = jj_consume_token(IDENTIFIER);
n13 = JTBToolkit.makeNodeToken(n14);
n10.addNode(n13);
n9.addNode(n10);
    }
n9.nodes.trimToSize();
    n16 = jj_consume_token(RIGHT_PARENTHESIS);
n15 = JTBToolkit.makeNodeToken(n16);
    n18 = jj_consume_token(LEFT_BRACE);
n17 = JTBToolkit.makeNodeToken(n18);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case FOR:
    case IF:
    case PRINT:
    case READ:
    case VAR:
    case IDENTIFIER:{
      n20 = MyParserstatement();
n19.addNode(n20);
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    n22 = jj_consume_token(RIGHT_BRACE);
n21 = JTBToolkit.makeNodeToken(n22);
{if ("" != null) return new MyParserfunction(n0, n2, n4, n6, n9, n15, n17, n19, n21);}
    throw new Error("Missing return statement in function");
  }

  static final public MyParserstatement MyParserstatement() throws ParseException {// --- JTB generated node declarations ---
  NodeList n0 = new NodeList();
  NodeChoice n1 = null;
  MyParserprintStatement n2 = null;
  MyParserforStatement n3 = null;
  MyParserifStatemet n4 = null;
  MyParserreadStatement n5 = null;
  MyParsercallStatement n6 = null;
  MyParsersetValueStatement n7 = null;
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PRINT:{
        n2 = MyParserprintStatement();
n1 = new NodeChoice(n2, 0, 6);
        break;
        }
      case FOR:{
        n3 = MyParserforStatement();
n1 = new NodeChoice(n3, 1, 6);
        break;
        }
      case IF:{
        n4 = MyParserifStatemet();
n1 = new NodeChoice(n4, 2, 6);
        break;
        }
      case READ:{
        n5 = MyParserreadStatement();
n1 = new NodeChoice(n5, 3, 6);
        break;
        }
      case IDENTIFIER:{
        n6 = MyParsercallStatement();
n1 = new NodeChoice(n6, 4, 6);
        break;
        }
      case VAR:{
        n7 = MyParsersetValueStatement();
n1 = new NodeChoice(n7, 5, 6);
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
n0.addNode(n1);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FOR:
      case IF:
      case PRINT:
      case READ:
      case VAR:
      case IDENTIFIER:{
        ;
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        break label_3;
      }
    }
n0.nodes.trimToSize();
{if ("" != null) return new MyParserstatement(n0);}
    throw new Error("Missing return statement in function");
  }

  static final public MyParserforStatement MyParserforStatement() throws ParseException {// --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  MyParserstatement n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
    n1 = jj_consume_token(FOR);
n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(INTEGER);
n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(TO);
n4 = JTBToolkit.makeNodeToken(n5);
    n7 = jj_consume_token(INTEGER);
n6 = JTBToolkit.makeNodeToken(n7);
    n9 = jj_consume_token(LEFT_BRACE);
n8 = JTBToolkit.makeNodeToken(n9);
    n10 = MyParserstatement();
    n12 = jj_consume_token(RIGHT_BRACE);
n11 = JTBToolkit.makeNodeToken(n12);
{if ("" != null) return new MyParserforStatement(n0, n2, n4, n6, n8, n10, n11);}
    throw new Error("Missing return statement in function");
  }

  static final public MyParserprintStatement MyParserprintStatement() throws ParseException {// --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeChoice n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
    n1 = jj_consume_token(PRINT);
n0 = JTBToolkit.makeNodeToken(n1);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFIER:{
      n4 = jj_consume_token(IDENTIFIER);
n3 = JTBToolkit.makeNodeToken(n4);
n2 = new NodeChoice(n3, 0, 2);
      break;
      }
    case QUOTED_IDENTIFIER:{
      n6 = jj_consume_token(QUOTED_IDENTIFIER);
n5 = JTBToolkit.makeNodeToken(n6);
n2 = new NodeChoice(n5, 1, 2);
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return new MyParserprintStatement(n0, n2);}
    throw new Error("Missing return statement in function");
  }

  static final public MyParserifStatemet MyParserifStatemet() throws ParseException {// --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeChoice n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeChoice n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
  NodeChoice n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
  NodeToken n15 = null;
  Token n16 = null;
  NodeToken n17 = null;
  Token n18 = null;
  MyParserstatement n19 = null;
  NodeToken n20 = null;
  Token n21 = null;
    n1 = jj_consume_token(IF);
n0 = JTBToolkit.makeNodeToken(n1);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFIER:{
      n4 = jj_consume_token(IDENTIFIER);
n3 = JTBToolkit.makeNodeToken(n4);
n2 = new NodeChoice(n3, 0, 2);
      break;
      }
    case NULL:{
      n6 = jj_consume_token(NULL);
n5 = JTBToolkit.makeNodeToken(n6);
n2 = new NodeChoice(n5, 1, 2);
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IF_EQUAL:{
      n9 = jj_consume_token(IF_EQUAL);
n8 = JTBToolkit.makeNodeToken(n9);
n7 = new NodeChoice(n8, 0, 2);
      break;
      }
    case IF_NOT_EQUAL:{
      n11 = jj_consume_token(IF_NOT_EQUAL);
n10 = JTBToolkit.makeNodeToken(n11);
n7 = new NodeChoice(n10, 1, 2);
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFIER:{
      n14 = jj_consume_token(IDENTIFIER);
n13 = JTBToolkit.makeNodeToken(n14);
n12 = new NodeChoice(n13, 0, 2);
      break;
      }
    case NULL:{
      n16 = jj_consume_token(NULL);
n15 = JTBToolkit.makeNodeToken(n16);
n12 = new NodeChoice(n15, 1, 2);
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    n18 = jj_consume_token(LEFT_BRACE);
n17 = JTBToolkit.makeNodeToken(n18);
    n19 = MyParserstatement();
    n21 = jj_consume_token(RIGHT_BRACE);
n20 = JTBToolkit.makeNodeToken(n21);
{if ("" != null) return new MyParserifStatemet(n0, n2, n7, n12, n17, n19, n20);}
    throw new Error("Missing return statement in function");
  }

  static final public MyParserreadStatement MyParserreadStatement() throws ParseException {// --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
    n1 = jj_consume_token(READ);
n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(QUOTED_IDENTIFIER);
n2 = JTBToolkit.makeNodeToken(n3);
    n5 = jj_consume_token(TO);
n4 = JTBToolkit.makeNodeToken(n5);
    n7 = jj_consume_token(IDENTIFIER);
n6 = JTBToolkit.makeNodeToken(n7);
{if ("" != null) return new MyParserreadStatement(n0, n2, n4, n6);}
    throw new Error("Missing return statement in function");
  }

  static final public MyParsercallStatement MyParsercallStatement() throws ParseException {// --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeOptional n4 = new NodeOptional();
  NodeToken n5 = null;
  Token n6 = null;
  NodeListOptional n7 = new NodeListOptional();
  NodeSequence n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
    n1 = jj_consume_token(IDENTIFIER);
n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(LEFT_PARENTHESIS);
n2 = JTBToolkit.makeNodeToken(n3);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFIER:{
      n6 = jj_consume_token(IDENTIFIER);
n5 = JTBToolkit.makeNodeToken(n6);
n4.addNode(n5);
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA_CHAR:{
        ;
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        break label_4;
      }
n8 = new NodeSequence(2);
      n10 = jj_consume_token(COMMA_CHAR);
n9 = JTBToolkit.makeNodeToken(n10);
n8.addNode(n9);
      n12 = jj_consume_token(IDENTIFIER);
n11 = JTBToolkit.makeNodeToken(n12);
n8.addNode(n11);
n7.addNode(n8);
    }
n7.nodes.trimToSize();
    n14 = jj_consume_token(RIGHT_PARENTHESIS);
n13 = JTBToolkit.makeNodeToken(n14);
{if ("" != null) return new MyParsercallStatement(n0, n2, n4, n7, n13);}
    throw new Error("Missing return statement in function");
  }

  static final public MyParsersetValueStatement MyParsersetValueStatement() throws ParseException {// --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeOptional n4 = new NodeOptional();
  NodeSequence n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  NodeChoice n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
    n1 = jj_consume_token(VAR);
n0 = JTBToolkit.makeNodeToken(n1);
    n3 = jj_consume_token(IDENTIFIER);
n2 = JTBToolkit.makeNodeToken(n3);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EQUAL:{
n5 = new NodeSequence(2);
      n7 = jj_consume_token(EQUAL);
n6 = JTBToolkit.makeNodeToken(n7);
n5.addNode(n6);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER:{
        n10 = jj_consume_token(IDENTIFIER);
n9 = JTBToolkit.makeNodeToken(n10);
n8 = new NodeChoice(n9, 0, 3);
        break;
        }
      case QUOTED_IDENTIFIER:{
        n12 = jj_consume_token(QUOTED_IDENTIFIER);
n11 = JTBToolkit.makeNodeToken(n12);
n8 = new NodeChoice(n11, 1, 3);
        break;
        }
      case INTEGER:{
        n14 = jj_consume_token(INTEGER);
n13 = JTBToolkit.makeNodeToken(n14);
n8 = new NodeChoice(n13, 2, 3);
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
n5.addNode(n8);
n4.addNode(n5);
      break;
      }
    default:
      jj_la1[13] = jj_gen;
      ;
    }
{if ("" != null) return new MyParsersetValueStatement(n0, n2, n4);}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public MyParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[14];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x20,0x800000,0x20000,0x8016c0,0x8016c0,0x8016c0,0x2800000,0x800100,0x180000,0x800100,0x800000,0x20000,0x2a00000,0x40000,};
   }

  /** Constructor with InputStream. */
  public MyParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MyParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MyParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public MyParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MyParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public MyParser(MyParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(MyParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[28];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 14; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 28; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

                       }

class JTBToolkit {

  static NodeToken makeNodeToken(final Token t) {
    return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
  }
}

/* Generated by JTB 1.4.7 */


options
{
  IGNORE_CASE = true;
  OUTPUT_DIRECTORY = "../src/com/lopiter/parser";
}

PARSER_BEGIN(MyParser)
package com.lopiter.parser;

import com.lopiter.parser.node.*;


public class MyParser {}

class JTBToolkit {

  static NodeToken makeNodeToken(final Token t) {
    return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
  }
}

PARSER_END(MyParser)

SKIP :
{
  < ( "\n" )+ >
}

SKIP :
{
  < ( " "| "\t"| "\r" )+ >
}

SPECIAL_TOKEN :
{
  < MULTI_LINE_COMMENT : "/*" ( ~["*"] )* "*" ( "*"| ( ~["*", "/"] ( ~["*"] )* "*" ) )* "/" >
| < LINE_COMMENT : "--" ( ~["\r", "\n"] )* >
}

TOKEN :
{
  < FUNCTION : "FUNCTION" >
| < FOR : "FOR" >
| < IF : "IF" >
| < NULL : "NULL" >
| < PRINT : "PRINT" >
| < READ : "READ" >
| < TO : "TO" >
| < VAR : "VAR" >
| < LEFT_BRACE : "{" >
| < RIGHT_BRACE : "}" >
| < LEFT_PARENTHESIS : "(" >
| < RIGHT_PARENTHESIS : ")" >
| < COMMA_CHAR : "," >
| < EQUAL : "=" >
| < IF_EQUAL : "==" >
| < IF_NOT_EQUAL : "!=" >
| < INTEGER : ( <DIGIT> )+ >
| < #DIGIT : ["0"-"9"] >
| < IDENTIFIER : ( <LETTER> )+ ( <DIGIT>| <LETTER>| <SPECIAL_CHARS> )* >
| < CHAR_LITERAL : "'" ( ~["'"] )* "'" ( "'" ( ~["'"] )* "'" )* >
| < QUOTED_IDENTIFIER : "\"" ( ~["\n", "\r", "\""] )* "\"" >
| < #LETTER : ["a"-"z", "A"-"Z", "_"] >
| < #SPECIAL_CHARS : "-"| "_" >
}

MyParsercompilationunit MyParsercompilationunit() :
{
  // --- JTB generated node declarations ---
  NodeList n0 = new NodeList();
  MyParserfunction n1 = null;
}
{
  (
    n1 = MyParserfunction()
    { n0.addNode(n1); }
  )+
  { n0.nodes.trimToSize(); }
  { return new MyParsercompilationunit(n0); }
}

MyParserfunction MyParserfunction() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeOptional n6 = new NodeOptional();
  NodeToken n7 = null;
  Token n8 = null;
  NodeListOptional n9 = new NodeListOptional();
  NodeSequence n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
  NodeToken n15 = null;
  Token n16 = null;
  NodeToken n17 = null;
  Token n18 = null;
  NodeOptional n19 = new NodeOptional();
  MyParserstatement n20 = null;
  NodeToken n21 = null;
  Token n22 = null;
}
{
  n1 = < FUNCTION >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < IDENTIFIER >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n5 = < LEFT_PARENTHESIS >
  { n4 = JTBToolkit.makeNodeToken(n5); }
  [
    n8 = < IDENTIFIER >
    { n7 = JTBToolkit.makeNodeToken(n8); }
    { n6.addNode(n7); }
  ]
  (
    { n10 = new NodeSequence(2); }
    n12 = < COMMA_CHAR >
    { n11 = JTBToolkit.makeNodeToken(n12); }
    { n10.addNode(n11); }
    n14 = < IDENTIFIER >
    { n13 = JTBToolkit.makeNodeToken(n14); }
    { n10.addNode(n13); }
    { n9.addNode(n10); }
  )*
  { n9.nodes.trimToSize(); }
  n16 = < RIGHT_PARENTHESIS >
  { n15 = JTBToolkit.makeNodeToken(n16); }
  n18 = < LEFT_BRACE >
  { n17 = JTBToolkit.makeNodeToken(n18); }
  [
    n20 = MyParserstatement()
    { n19.addNode(n20); }
  ]
  n22 = < RIGHT_BRACE >
  { n21 = JTBToolkit.makeNodeToken(n22); }
  { return new MyParserfunction(n0, n2, n4, n6, n9, n15, n17, n19, n21); }
}

MyParserstatement MyParserstatement() :
{
  // --- JTB generated node declarations ---
  NodeList n0 = new NodeList();
  NodeChoice n1 = null;
  MyParserprintStatement n2 = null;
  MyParserforStatement n3 = null;
  MyParserifStatemet n4 = null;
  MyParserreadStatement n5 = null;
  MyParsercallStatement n6 = null;
  MyParsersetValueStatement n7 = null;
}
{
  (
    (
      n2 = MyParserprintStatement()
      { n1 = new NodeChoice(n2, 0, 6); }
    |
      n3 = MyParserforStatement()
      { n1 = new NodeChoice(n3, 1, 6); }
    |
      n4 = MyParserifStatemet()
      { n1 = new NodeChoice(n4, 2, 6); }
    |
      n5 = MyParserreadStatement()
      { n1 = new NodeChoice(n5, 3, 6); }
    |
      n6 = MyParsercallStatement()
      { n1 = new NodeChoice(n6, 4, 6); }
    |
      n7 = MyParsersetValueStatement()
      { n1 = new NodeChoice(n7, 5, 6); }
    )
    { n0.addNode(n1); }
  )+
  { n0.nodes.trimToSize(); }
  { return new MyParserstatement(n0); }
}

MyParserforStatement MyParserforStatement() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  MyParserstatement n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
}
{
  n1 = < FOR >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < INTEGER >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n5 = < TO >
  { n4 = JTBToolkit.makeNodeToken(n5); }
  n7 = < INTEGER >
  { n6 = JTBToolkit.makeNodeToken(n7); }
  n9 = < LEFT_BRACE >
  { n8 = JTBToolkit.makeNodeToken(n9); }
  n10 = MyParserstatement()
  n12 = < RIGHT_BRACE >
  { n11 = JTBToolkit.makeNodeToken(n12); }
  { return new MyParserforStatement(n0, n2, n4, n6, n8, n10, n11); }
}

MyParserprintStatement MyParserprintStatement() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeChoice n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
}
{
  n1 = < PRINT >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  (
    (
      n4 = < IDENTIFIER >
      { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2 = new NodeChoice(n3, 0, 2); }
    |
      n6 = < QUOTED_IDENTIFIER >
      { n5 = JTBToolkit.makeNodeToken(n6); }
      { n2 = new NodeChoice(n5, 1, 2); }
    )
    
  )
  { return new MyParserprintStatement(n0, n2); }
}

MyParserifStatemet MyParserifStatemet() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeChoice n2 = null;
  NodeToken n3 = null;
  Token n4 = null;
  NodeToken n5 = null;
  Token n6 = null;
  NodeChoice n7 = null;
  NodeToken n8 = null;
  Token n9 = null;
  NodeToken n10 = null;
  Token n11 = null;
  NodeChoice n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
  NodeToken n15 = null;
  Token n16 = null;
  NodeToken n17 = null;
  Token n18 = null;
  MyParserstatement n19 = null;
  NodeToken n20 = null;
  Token n21 = null;
}
{
  n1 = < IF >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  (
    (
      n4 = < IDENTIFIER >
      { n3 = JTBToolkit.makeNodeToken(n4); }
      { n2 = new NodeChoice(n3, 0, 2); }
    |
      n6 = < NULL >
      { n5 = JTBToolkit.makeNodeToken(n6); }
      { n2 = new NodeChoice(n5, 1, 2); }
    )
    
  )
  (
    (
      n9 = < IF_EQUAL >
      { n8 = JTBToolkit.makeNodeToken(n9); }
      { n7 = new NodeChoice(n8, 0, 2); }
    |
      n11 = < IF_NOT_EQUAL >
      { n10 = JTBToolkit.makeNodeToken(n11); }
      { n7 = new NodeChoice(n10, 1, 2); }
    )
    
  )
  (
    (
      n14 = < IDENTIFIER >
      { n13 = JTBToolkit.makeNodeToken(n14); }
      { n12 = new NodeChoice(n13, 0, 2); }
    |
      n16 = < NULL >
      { n15 = JTBToolkit.makeNodeToken(n16); }
      { n12 = new NodeChoice(n15, 1, 2); }
    )
    
  )
  n18 = < LEFT_BRACE >
  { n17 = JTBToolkit.makeNodeToken(n18); }
  n19 = MyParserstatement()
  n21 = < RIGHT_BRACE >
  { n20 = JTBToolkit.makeNodeToken(n21); }
  { return new MyParserifStatemet(n0, n2, n7, n12, n17, n19, n20); }
}

MyParserreadStatement MyParserreadStatement() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeToken n4 = null;
  Token n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
}
{
  n1 = < READ >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < QUOTED_IDENTIFIER >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  n5 = < TO >
  { n4 = JTBToolkit.makeNodeToken(n5); }
  n7 = < IDENTIFIER >
  { n6 = JTBToolkit.makeNodeToken(n7); }
  { return new MyParserreadStatement(n0, n2, n4, n6); }
}

MyParsercallStatement MyParsercallStatement() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeOptional n4 = new NodeOptional();
  NodeToken n5 = null;
  Token n6 = null;
  NodeListOptional n7 = new NodeListOptional();
  NodeSequence n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
}
{
  n1 = < IDENTIFIER >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < LEFT_PARENTHESIS >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  [
    n6 = < IDENTIFIER >
    { n5 = JTBToolkit.makeNodeToken(n6); }
    { n4.addNode(n5); }
  ]
  (
    { n8 = new NodeSequence(2); }
    n10 = < COMMA_CHAR >
    { n9 = JTBToolkit.makeNodeToken(n10); }
    { n8.addNode(n9); }
    n12 = < IDENTIFIER >
    { n11 = JTBToolkit.makeNodeToken(n12); }
    { n8.addNode(n11); }
    { n7.addNode(n8); }
  )*
  { n7.nodes.trimToSize(); }
  n14 = < RIGHT_PARENTHESIS >
  { n13 = JTBToolkit.makeNodeToken(n14); }
  { return new MyParsercallStatement(n0, n2, n4, n7, n13); }
}

MyParsersetValueStatement MyParsersetValueStatement() :
{
  // --- JTB generated node declarations ---
  NodeToken n0 = null;
  Token n1 = null;
  NodeToken n2 = null;
  Token n3 = null;
  NodeOptional n4 = new NodeOptional();
  NodeSequence n5 = null;
  NodeToken n6 = null;
  Token n7 = null;
  NodeChoice n8 = null;
  NodeToken n9 = null;
  Token n10 = null;
  NodeToken n11 = null;
  Token n12 = null;
  NodeToken n13 = null;
  Token n14 = null;
}
{
  n1 = < VAR >
  { n0 = JTBToolkit.makeNodeToken(n1); }
  n3 = < IDENTIFIER >
  { n2 = JTBToolkit.makeNodeToken(n3); }
  [
    { n5 = new NodeSequence(2); }
    n7 = < EQUAL >
    { n6 = JTBToolkit.makeNodeToken(n7); }
    { n5.addNode(n6); }
    (
      (
        n10 = < IDENTIFIER >
        { n9 = JTBToolkit.makeNodeToken(n10); }
        { n8 = new NodeChoice(n9, 0, 3); }
      |
        n12 = < QUOTED_IDENTIFIER >
        { n11 = JTBToolkit.makeNodeToken(n12); }
        { n8 = new NodeChoice(n11, 1, 3); }
      |
        n14 = < INTEGER >
        { n13 = JTBToolkit.makeNodeToken(n14); }
        { n8 = new NodeChoice(n13, 2, 3); }
      )
      
    )
    { n5.addNode(n8); }
    { n4.addNode(n5); }
  ]
  { return new MyParsersetValueStatement(n0, n2, n4); }
}

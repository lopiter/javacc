/* Generated by JTB 1.4.7 */
package visitor;

import syntaxtree.*;
import java.util.*;

public class DepthFirstRetArguVisitor<R, A> implements IRetArguVisitor<R, A> {


  public R visit(final NodeChoice n, final A argu) {
    /* You have to adapt which data is returned (result variables below are just examples) */
    final R nRes = n.choice.accept(this, argu);
    return nRes;
  }

  public R visit(final NodeList n, final A argu) {
    /* You have to adapt which data is returned (result variables below are just examples) */
    R nRes = null;
    for (final Iterator<INode> e = n.elements(); e.hasNext();) {
      @SuppressWarnings("unused")
      final R sRes = e.next().accept(this, argu);
    }
    return nRes;
  }

  public R visit(final NodeListOptional n, final A argu) {
    /* You have to adapt which data is returned (result variables below are just examples) */
    if (n.present()) {
      R nRes = null;
      for (final Iterator<INode> e = n.elements(); e.hasNext();) {
        @SuppressWarnings("unused")
        R sRes = e.next().accept(this, argu);
        }
      return nRes;
    } else
      return null;
  }

  public R visit(final NodeOptional n, final A argu) {
    /* You have to adapt which data is returned (result variables below are just examples) */
    if (n.present()) {
      final R nRes = n.node.accept(this, argu);
      return nRes;
    } else
      return null;
  }

  public R visit(final NodeSequence n, final A argu) {
    /* You have to adapt which data is returned (result variables below are just examples) */
    R nRes = null;
    for (final Iterator<INode> e = n.elements(); e.hasNext();) {
      @SuppressWarnings("unused")
      R subRet = e.next().accept(this, argu);
    }
    return nRes;
  }

  public R visit(final NodeTCF n, final A argu) {
    /* You have to adapt which data is returned (result variables below are just examples) */
    R nRes = null;
    @SuppressWarnings("unused")
    final String tkIm = n.tokenImage;
    return nRes;
  }

  public R visit(final NodeToken n, final A argu) {
    /* You have to adapt which data is returned (result variables below are just examples) */
    R nRes = null;
    @SuppressWarnings("unused")
    final String tkIm = n.tokenImage;
    return nRes;
  }

  public R visit(final compilationunit n, final A argu) {
    R nRes = null;
    // f0 -> ( function() )+
    n.f0.accept(this, argu);
    return nRes;
  }

  public R visit(final function n, final A argu) {
    R nRes = null;
    // f0 -> <FUNCTION>
    n.f0.accept(this, argu);
    // f1 -> <IDENTIFIER>
    n.f1.accept(this, argu);
    // f2 -> <LEFT_PARENTHESIS>
    n.f2.accept(this, argu);
    // f3 -> [ <IDENTIFIER> ]
    n.f3.accept(this, argu);
    // f4 -> ( #0 <COMMA_CHAR> #1 <IDENTIFIER> )*
    n.f4.accept(this, argu);
    // f5 -> <RIGHT_PARENTHESIS>
    n.f5.accept(this, argu);
    // f6 -> <LEFT_BRACE>
    n.f6.accept(this, argu);
    // f7 -> [ statement() ]
    n.f7.accept(this, argu);
    // f8 -> <RIGHT_BRACE>
    n.f8.accept(this, argu);
    return nRes;
  }

  public R visit(final statement n, final A argu) {
    R nRes = null;
    // f0 -> ( %0 printStatement()
    // .. .. | %1 forStatement()
    // .. .. | %2 ifStatemet()
    // .. .. | %3 readStatement()
    // .. .. | %4 callStatement()
    // .. .. | %5 setValueStatement() )+
    n.f0.accept(this, argu);
    return nRes;
  }

  public R visit(final forStatement n, final A argu) {
    R nRes = null;
    // f0 -> <FOR>
    n.f0.accept(this, argu);
    // f1 -> <INTEGER>
    n.f1.accept(this, argu);
    // f2 -> <TO>
    n.f2.accept(this, argu);
    // f3 -> <INTEGER>
    n.f3.accept(this, argu);
    // f4 -> <LEFT_BRACE>
    n.f4.accept(this, argu);
    // f5 -> statement()
    n.f5.accept(this, argu);
    // f6 -> <RIGHT_BRACE>
    n.f6.accept(this, argu);
    return nRes;
  }

  public R visit(final printStatement n, final A argu) {
    R nRes = null;
    // f0 -> <PRINT>
    n.f0.accept(this, argu);
    // f1 -> ( %0 <IDENTIFIER>
    // .. .. | %1 <QUOTED_IDENTIFIER> )
    n.f1.accept(this, argu);
    return nRes;
  }

  public R visit(final ifStatemet n, final A argu) {
    R nRes = null;
    // f0 -> <IF>
    n.f0.accept(this, argu);
    // f1 -> ( %0 <IDENTIFIER>
    // .. .. | %1 <NULL> )
    n.f1.accept(this, argu);
    // f2 -> ( %0 <IF_EQUAL>
    // .. .. | %1 <IF_NOT_EQUAL> )
    n.f2.accept(this, argu);
    // f3 -> ( %0 <IDENTIFIER>
    // .. .. | %1 <NULL> )
    n.f3.accept(this, argu);
    // f4 -> <LEFT_BRACE>
    n.f4.accept(this, argu);
    // f5 -> statement()
    n.f5.accept(this, argu);
    // f6 -> <RIGHT_BRACE>
    n.f6.accept(this, argu);
    return nRes;
  }

  public R visit(final readStatement n, final A argu) {
    R nRes = null;
    // f0 -> <READ>
    n.f0.accept(this, argu);
    // f1 -> <QUOTED_IDENTIFIER>
    n.f1.accept(this, argu);
    // f2 -> <TO>
    n.f2.accept(this, argu);
    // f3 -> <IDENTIFIER>
    n.f3.accept(this, argu);
    return nRes;
  }

  public R visit(final callStatement n, final A argu) {
    R nRes = null;
    // f0 -> <IDENTIFIER>
    n.f0.accept(this, argu);
    // f1 -> <LEFT_PARENTHESIS>
    n.f1.accept(this, argu);
    // f2 -> [ <IDENTIFIER> ]
    n.f2.accept(this, argu);
    // f3 -> ( #0 <COMMA_CHAR> #1 <IDENTIFIER> )*
    n.f3.accept(this, argu);
    // f4 -> <RIGHT_PARENTHESIS>
    n.f4.accept(this, argu);
    return nRes;
  }

  public R visit(final setValueStatement n, final A argu) {
    R nRes = null;
    // f0 -> <VAR>
    n.f0.accept(this, argu);
    // f1 -> <IDENTIFIER>
    n.f1.accept(this, argu);
    // f2 -> [ #0 <EQUAL>
    // .. .. . #1 ( %0 <IDENTIFIER>
    // .. .. . .. | %1 <QUOTED_IDENTIFIER>
    // .. .. . .. | %2 <INTEGER> ) ]
    n.f2.accept(this, argu);
    return nRes;
  }

}
